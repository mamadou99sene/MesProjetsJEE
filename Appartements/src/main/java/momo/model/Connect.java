package momo.model;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.Part;

public class Connect 
{
	private Connection con;
	private PreparedStatement pr;
	public static final int TAILLE_TAMPON = 10240;
    public static final String CHEMIN_FICHIERS = "C:\\Program Files (x86)\\PostgreSQL\\10\\data\\base";
	public void se_connecter()
	{
		try 
		{
			Class.forName("org.postgresql.Driver");
		} 
		catch (ClassNotFoundException e) 
		{
			System.out.println("Echec lors de chargement du driver "+e.getMessage());
		}
		try
		{
			con=DriverManager.getConnection("jdbc:postgresql://localhost:5433/gestimmo","Mamadou","Senemomo2019");
		} 
		catch (SQLException e) {
			
			System.out.println("Impossible de se connecter a la base de donnees "+e.getMessage());
		}
	
	}
	//methode pour inserer un appartement avec tous ses images
	public void inserer(Appartement ap) 
	{
		se_connecter();
		//Image im=new Image();
		//int id_image_app=ap.getidApp();

		String requete=SQL_function.insert_App();
		try {
			//id_image_app c'est l'id de l'appartement dans la table image c'est
			//un autoGeneratedKeys(recuperer l'id du dernier appartement)
			pr=con.prepareStatement(requete);
			pr.setString(1, ap.getLibelle());
			pr.setString(2, ap.getNomImmeuble());
			pr.setString(3, ap.getType());
			pr.setDouble(4, ap.getSuperficie());
			pr.setInt   (5, ap.getNbrePiece());
			pr.setDouble(6, ap.getPrix());
			pr.setString(7, ap.getDescription());
			pr.setString(8, ap.getAdresse());
			pr.setString(9, ap.getQuartier());
			pr.setString(10,ap.getVille());
			 pr.executeUpdate();
		} 
		catch (SQLException e) 
		{
			System.out.println("Impossible d inserer la ligne dans la table" +e.getMessage());
		} 
		/*Parcourir les photos et inserer l'url de chacun dans la base
		for(int i=0;i<=image.size();i++)
		{
			HttpServletRequest request=null;
			 Part part=null;
			try 
			{
				part = request.getPart(image.get(i).getUrl());
			}
			catch (IOException | ServletException e1) 
			{	
				System.out.println("Erreur lors de la recuperation du fichier "+e1.getMessage());
			}
		    // On vérifie qu'on a bien reçu un fichier
		    String nomFichier = getNomFichier(part);
            // Si on a bien un fichier
		      if (nomFichier != null && !nomFichier.isEmpty())
		      {
		         String nomChamp = part.getName();
		         // Corrige un bug du fonctionnement d'Internet Explorer
		         nomFichier=nomFichier.substring(nomFichier.lastIndexOf('/')+1).substring(nomFichier.lastIndexOf('\\')+1);
                  // On écrit définitivement le fichier sur le disque
		          try
		          {
					ecrireFichier(part, nomFichier, CHEMIN_FICHIERS);
				  } 
		          catch (IOException e)
		          {
					System.out.println("Impossible de deplacer le fichier dans le repertoire "+e.getMessage());				  }
		     }
			try
			{
				String new_requete="INSERT INTO image(url,idApp)VALUES(?,?)";
				pr=con.prepareStatement(new_requete);
				image.add(im);
				//on ajoute tous les url dans la collection, et pour l'insertion
				//on recupere l'url de l'element a la position i du tableau
				pr.setString(1, image.get(i).getUrl());
				pr.setInt(2, id_image_app);
			}
			catch(SQLException e)
			{
				System.out.println("Impossible d'ajouter l'image de l'appartement "+e.getMessage());
		    }
		}*/
	}
	public boolean modifier(Appartement a,int id)
	{
		se_connecter();
		String requete=SQL_function.update();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setDouble(1, a.getPrix());
			pr.setInt(2, id);
			pr.executeUpdate();
		} catch (SQLException e)
		{
			
			e.printStackTrace();
		}
		return true;
	}
	public Boolean supprimer(Appartement a,int id)
	{
		se_connecter();
		String requete=SQL_function.delete();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setInt(1, id);
			pr.executeUpdate();
		} catch (SQLException e)
		{
			
			e.printStackTrace();
		}
		return true;
		
	}
	public ArrayList<Appartement> afficher()
	{
		se_connecter();
		ArrayList<Appartement> appartement=new ArrayList <Appartement>();
		//ArrayList<Image> image=new ArrayList <Image>();
		String requete=SQL_function.afficher();
		try 
		{
			pr=con.prepareStatement(requete);
			
			ResultSet res=pr.executeQuery();
			while(res.next())
			{
				String libelle=res.getString("libelle");
				String nom=res.getString("nomImmeuble");
				double prix=res.getDouble("prix");
				String ville=res.getString("ville");
				String quartier=res.getString("quartier");
				int id=res.getInt("idapp");
				String type=res.getString("type");
				//String url=res.getString("url");
				Appartement ap=new Appartement();
				//Image im=new Image();
				ap.setType(type);
				ap.setLibelle(libelle);
				ap.setNomImmeuble(nom);
				ap.setPrix(prix);
				ap.setQuartier(quartier);
				ap.setVille(ville);	
				ap.setiApp(id);
				//im.setUrl(url);
				//image.add(im);
				//ap.setImage(image);
				appartement.add(ap);
				 
			}
		} 
		catch (SQLException e) { 
			System.out.println("Impossible d'afficher les appartements"+e.getMessage());
			e.printStackTrace();
		}
		return appartement;
	}
	public Appartement get_details(int id)
	{
		se_connecter();
		Appartement appartement=new Appartement();
		String requete=SQL_function.show_details();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setInt(1, id);
			ResultSet res=pr.executeQuery();
			while(res.next())
			{
				String libelle=res.getString(2);
				String nom=res.getString(3);
				double prix=res.getDouble("prix");
				String description=res.getString("description");
				String ville=res.getString("ville");
				int nombre=res.getInt("nbrepieces");
				double superficie=res.getDouble("superficie");
				String type=res.getString("type");
				appartement.setVille(ville);
				appartement.setType(type);
				appartement.setSuperficie(superficie);
				appartement.setNbrePiece(nombre);
				appartement.setLibelle(libelle);
				appartement.setNomImmeuble(nom);
				appartement.setPrix(prix);
				appartement.setDescription(description);
			}
		}
		catch (SQLException e) 
		{
			
			e.getMessage();
		}
		return appartement;
	}
	public Appartement selectionner(int id)
	{
		se_connecter();
		Appartement app=new Appartement();
		String requete=SQL_function.pre_remplissage();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setInt(1, id);
			ResultSet res=pr.executeQuery();
			while(res.next())
			{
				String libelle=res.getString("libelle");
				String nom=res.getString("nomImmeuble");
				double prix=res.getDouble("prix");
				String ville=res.getString("ville");
				String quartier=res.getString("quartier");
				String description=res.getString("description");
				app.setLibelle(libelle);
				app.setNomImmeuble(nom);
				app.setPrix(prix);
				app.setQuartier(quartier);
				app.setVille(ville);	
				app.setDescription(description);
			}
			
		} catch (SQLException e) 
		{
		
			e.printStackTrace();
		}
		
		return app;
	}
	public ArrayList<Appartement> rechercher(String chaine)
	{
		se_connecter();
		ArrayList<Appartement> appartement=new ArrayList<Appartement>();
		String requete=SQL_function.recherche();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setString(1, chaine);
			pr.setString(2, chaine);
			pr.setString(3, chaine);
			ResultSet res=pr.executeQuery();
			while(res.next())
			{
				String libelle=res.getString("libelle");
				String nom=res.getString("nomImmeuble");
				double prix=res.getDouble("prix");
				String ville=res.getString("ville");
				String quartier=res.getString("quartier");
				String description=res.getString("description");
				int id=res.getInt("idapp");
				Appartement app=new Appartement();
				app.setiApp(id);
				app.setLibelle(libelle);
				app.setNomImmeuble(nom);
				app.setPrix(prix);
				app.setQuartier(quartier);
				app.setVille(ville);	
				app.setDescription(description);
				appartement.add(app);
			}
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		return appartement;
	}
	public User authentification(String login,String password)
	{
		se_connecter();
		User user=new User();
		String requete=SQL_function.authentification();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setString(1,login);
			pr.setString(2, password);
			ResultSet res=pr.executeQuery();
			while(res.next())
			{
				String prenom=res.getString("prenom");
				String nom=res.getString("nom");
				int id=res.getInt("id_users");
				String log=res.getString("login");
				String pass=res.getString("password");
				user.setId(id);
				user.setPrenom(prenom);
				user.setNom(nom);
				user.setLogin(log);
				user.setPassword(pass);
			}
		} catch (SQLException e) 
		{
	
			e.printStackTrace();
		}
		return user;
	}
	public boolean reserver(int idapp,int id_users)
	{
		se_connecter();
		String requete=SQL_function.reserver();
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setInt(1,idapp);
			pr.setInt(2, id_users);
			int res=pr.executeUpdate();
			if(res==1)
			{
				return true;
			}
		} catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return false;
	}
	public boolean insert_user(User user)
	{
		se_connecter();
		String requete="INSERT INTO users(prenom,nom,telephone,login,password)VALUES(?,?,?,?,?)";
		try 
		{
			pr=con.prepareStatement(requete);
			pr.setString(1,user.getPrenom());
			pr.setString(2,user.getNom());
			pr.setString(3,user.getTelephone());
			pr.setString(4,user.getLogin());
			pr.setString(5,user.getPassword());
			int res=pr.executeUpdate();
			if(res==1)
			{
				return true;
			}
		} 
		catch (SQLException e) 
		{			
			System.out.println("Impossible d'inserer cet utilisateur "+e.getMessage());
		}
		return false;
	}
	public ArrayList<Reservation>my_reservations()
	{
		se_connecter();
		ArrayList<Reservation> reservation=new ArrayList<Reservation>();
		String requete="select id_res,heure,prenom,nom,telephone from  users  u JOIN  reservation res  on u.id_users=res.id_users";
				//"SELECT res.id_res,prenom,nom,telephone,prix,adresse,heure FROM users u JOIN reservation res JOIN appartement app ON u.id_users=res.id_users AND res.idapp=app.idapp ORDER BY res.id_res";
		
		try 
		{
			pr=con.prepareStatement(requete);
			ResultSet res=pr.executeQuery();
			while(res.next())
			{
				String prenom=res.getString("prenom");
				String nom=res.getString("nom");
				String telephone=res.getString("telephone");
				//String adresse=res.getString("adresse");
				//Double prix=res.getDouble("prix");
				String heure=res.getString("heure");
				int id_res=res.getInt("id_res");
				User user=new User();
				Reservation reserv=new Reservation();
				user.setPrenom(prenom);
				user.setNom(nom);
				user.setTelephone(telephone);
				Appartement appartement=new Appartement();
				//appartement.setAdresse(adresse);
				reserv.setId(id_res);
				reserv.setUser(user);
				reserv.setHeure(heure);
				reserv.setAppartement(appartement);
				reservation.add(reserv);
			}
		} 
		catch (SQLException e) 
		{
			System.out.println("Impossible d'afficher les reservations "+e.getMessage());
		}
		return reservation;
	}
	public String getNomFichier(Part part ) {
        for ( String contentDisposition : part.getHeader( "content-disposition" ).split( ";" ) ) 
        {
            if ( contentDisposition.trim().startsWith( "filename" ) )
            {
                return contentDisposition.substring( contentDisposition.indexOf( '=' ) + 1 ).trim().replace( "\"", "" );
            }
        }
        return null;
    }
	void ecrireFichier( Part part, String nomFichier, String chemin ) throws IOException 
	{
        BufferedInputStream entree = null;
        BufferedOutputStream sortie = null;
        try {
	            entree = new BufferedInputStream(part.getInputStream(), TAILLE_TAMPON);
	            sortie = new BufferedOutputStream(new FileOutputStream(new File(chemin + nomFichier)), TAILLE_TAMPON);
	
	            byte[] tampon = new byte[TAILLE_TAMPON];
	            int longueur;
	            while ((longueur = entree.read(tampon)) > 0) 
	            {
	                sortie.write(tampon, 0, longueur);
	            }
            }
        finally 
             {
               try
               {
                   sortie.close();
               } 
               catch (IOException ignore) 
               {
               }
               try
               {
                entree.close();
               }
               catch (IOException ignore)
               {
               }
             }
    }
	
}
